"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatetest"]("home",{

/***/ "./assets/js/pages/HomePage.js":
/*!*************************************!*\
  !*** ./assets/js/pages/HomePage.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   homepage: () => (/* binding */ homepage)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\nvar Homepage = /*#__PURE__*/function () {\n  function Homepage() {\n    var _this = this;\n    _classCallCheck(this, Homepage);\n    this.events();\n    this.highLights = document.querySelector(\".highLights\");\n    this.summerNote = document.getElementById(\"summernote\");\n    this.inProgress = false;\n    this.indexBtns = document.querySelector(\".indexBtns\");\n\n    /**\n     * Add an event listener for the window object to detect\n     * a scroll event\n     *  */\n    document.addEventListener(\"scroll\", function () {\n      if (_this.indexBtns) {\n        _this.scrollView();\n      }\n    });\n  }\n  return _createClass(Homepage, [{\n    key: \"events\",\n    value: function events() {\n      this.loadPosts();\n      this.LoadhighLights();\n      this.summerNoteInit();\n      this.addPost();\n      this.indexTabs();\n    }\n  }, {\n    key: \"indexTabs\",\n    value: function indexTabs() {\n      var tabIndex = document.querySelectorAll(\".tabIndex\");\n      var btnTrends = document.getElementById(\"btnTrends\");\n      var btnAddPosts = document.getElementById(\"btnAddPosts\");\n      var btnTimeline = document.getElementById(\"btnTimeline\");\n      var tabTimeline = document.querySelector(\".tabTimeline\");\n      var tabAddPosts = document.querySelector(\".tabAddPosts\");\n      var tabTrends = document.querySelector(\".tabTrends\");\n\n      // Initialize tabs - only hide non-active ones\n      hideNonstartingTabsIndex();\n      var indextabslinks = [btnTimeline, btnAddPosts, btnTrends];\n      var indextabs = [tabTimeline, tabAddPosts, tabTrends];\n      indextabslinks.forEach(function (item, idx) {\n        item.addEventListener(\"click\", function () {\n          // First, find currently active tab\n          var activeTabIndex = indextabs.findIndex(function (tab) {\n            return tab.classList.contains(\"show\") && tab.style.display !== \"none\";\n          });\n          if (activeTabIndex === idx) return; // Don't do anything if clicking the active tab\n\n          // Hide current active tab\n          if (activeTabIndex !== -1) {\n            indextabs[activeTabIndex].classList.remove(\"show\");\n            setTimeout(function () {\n              indextabs[activeTabIndex].style.display = \"none\";\n\n              // Show the new tab\n              indextabs[idx].style.display = null;\n\n              // Force a reflow to ensure the display change is applied\n              void indextabs[idx].offsetHeight;\n\n              // Add the show class to trigger the transition\n              indextabs[idx].classList.add(\"show\");\n            }, 300);\n          } else {\n            // No active tab found, just show the selected one\n            indextabs[idx].style.display = null;\n            setTimeout(function () {\n              indextabs[idx].classList.add(\"show\");\n            }, 50);\n          }\n        });\n      });\n      function hideNonstartingTabsIndex() {\n        if (tabAddPosts && tabTrends) {\n          tabAddPosts.style.display = \"none\";\n          tabTrends.style.display = \"none\";\n        }\n      }\n    }\n\n    /**\n     * Loads posts from the server with pagination support\n     * \n     * This method handles fetching posts from the server via AJAX, rendering them\n     * in the DOM, and managing pagination markers for infinite scrolling. It includes\n     * safeguards against concurrent requests and provides user feedback during loading.\n     * \n     * The method is triggered in two scenarios:\n     * 1. Initial page load to display the first set of posts\n     * 2. When the user scrolls near the bottom of the page (via scrollView method)\n     */\n  }, {\n    key: \"loadPosts\",\n    value: function loadPosts() {\n      var _this2 = this;\n      // Prevent multiple simultaneous AJAX requests\n      // This is critical for infinite scrolling to avoid duplicate posts\n      if (this.inProgress === true) {\n        return;\n      }\n\n      // Set flag to indicate a request is in progress\n      this.inProgress = true;\n\n      // Get the container where posts will be displayed\n      var postsArea = document.querySelector('.posts_area');\n      if (!postsArea) {\n        // Exit if the posts container doesn't exist in the DOM\n        this.inProgress = false;\n        return;\n      }\n\n      // Determine which page to load\n      // For initial load, page=1; for subsequent loads, get page from hidden input\n      var nextPageElement = postsArea.querySelector('.nextPage');\n      var page = nextPageElement ? nextPageElement.value : 1;\n\n      // Clean up any existing pagination markers before adding new content\n      // This prevents duplicate markers that could interfere with infinite scrolling\n      var paginationElements = postsArea.querySelectorAll('.nextPage, .noMorePosts');\n      paginationElements.forEach(function (el) {\n        return el.remove();\n      });\n\n      // Create and display a loading indicator to provide user feedback\n      var loadingIndicator = document.createElement('div');\n      loadingIndicator.className = 'loading-indicator';\n      loadingIndicator.textContent = 'Loading posts...';\n      postsArea.appendChild(loadingIndicator);\n\n      // Make AJAX request to the server to fetch posts\n      // Uses fetch API with POST method to send pagination parameters\n      fetch('includes/handlers/ajax_load_posts.php', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: \"page=\".concat(page, \"&userLoggedIn=\").concat(userLoggedIn)\n      }).then(function (response) {\n        return response.json();\n      }) // Parse JSON response\n      .then(function (data) {\n        // Remove loading indicator once response is received\n        loadingIndicator.remove();\n\n        // Process successful response from server\n        if (data.status === 'success' && data.data) {\n          var responseData = data.data;\n          var posts = responseData.posts;\n          if (posts && posts.length > 0) {\n            // Render each post in the DOM\n            posts.forEach(function (post) {\n              // Create container element for the post\n              var postElement = document.createElement('div');\n              postElement.className = 'recipe-card card'; // CSS classes for styling\n              postElement.dataset.postid = post.id; // Store post ID as data attribute\n\n              // Build post HTML structure using template literals\n              // This creates the complete card with user image, content, and stats\n              /*html*/\n              postElement.innerHTML = \"\\n              <div class=\\\"card-userImage\\\">\\n                <img src=\\\"\".concat(post.added_by.profile_pic, \"\\\" alt=\\\"\\\">\\n              </div>\\n              \\n              \").concat(post.can_delete ? function () {\n                console.log('Rendering delete button for post ID:', post.id);\n                return \"\\n                  <img id=\\\"\".concat(post.id, \"\\\" class=\\\"card-closeBtn\\\" src=\\\"./assets/img/close-btn-v2.svg\\\" alt=\\\"\\\">\\n                  \");\n              }() : '', \"\\n              \\n              <div class=\\\"card-info\\\">\\n                <div class=\\\"card-desc\\\">\\n                  <div class=\\\"block\\\"></div>\\n                  <div class=\\\"card-headings\\\">\\n                    <h2 class=\\\"heading-2\\\">\\n                      <a href=\\\"\").concat(post.link, \"\\\">\").concat(post.heading, \"</a>\\n                    </h2>\\n                    <h3 class=\\\"heading-3\\\">\\n                      \").concat(post.added_by.first_name, \" \").concat(post.added_by.last_name, \"\\n                    </h3>\\n                    <h4 class=\\\"heading-4\\\">\\n                      \").concat(post.time_message, \"\\n                    </h4>\\n                  </div>\\n                </div>\\n                \\n                <div class=\\\"card-stats\\\">\\n                  <div class=\\\"likes\\\">\\n                    <h4 class=\\\"heading-4\\\">\").concat(post.likes, \"</h4>\\n                    <img src=\\\"./assets/img/like-v2.svg\\\" alt=\\\"\\\">\\n                  </div>\\n                  <div class=\\\"comments\\\">\\n                    <h4 class=\\\"heading-4\\\">\").concat(post.comments_count, \"</h4>\\n                    <img src=\\\"./assets/img/comments-v2.svg\\\" alt=\\\"\\\">\\n                  </div>\\n                </div>\\n              </div>\\n              \\n              <div class=\\\"overlay\\\"></div>\\n              \").concat(post.image ? \"<img src=\\\"\".concat(post.image, \"\\\" class=\\\"card-bg\\\">\") : '', \"\\n            \");\n\n              // Add the completed post element to the posts container\n              postsArea.appendChild(postElement);\n            });\n\n            // Handle pagination based on server response\n            if (responseData.has_more) {\n              // If more posts exist, add hidden input with next page number\n              // This will be used by scrollView to load the next batch\n              var nextPageInput = document.createElement('input');\n              nextPageInput.type = 'hidden';\n              nextPageInput.className = 'nextPage';\n              nextPageInput.value = responseData.next_page;\n              postsArea.appendChild(nextPageInput);\n            } else {\n              // If no more posts exist, add marker to prevent further requests\n              var noMorePostsInput = document.createElement('input');\n              noMorePostsInput.type = 'hidden';\n              noMorePostsInput.className = 'noMorePosts';\n              noMorePostsInput.value = 'true';\n              postsArea.appendChild(noMorePostsInput);\n\n              // Also add visible message indicating end of content\n              var noMorePostsMessage = document.createElement('p');\n              noMorePostsMessage.className = 'noMorePosts column';\n              noMorePostsMessage.textContent = 'No more posts to show!';\n              postsArea.appendChild(noMorePostsMessage);\n            }\n          } else {\n            // Handle case where no posts were returned (empty array)\n            var noPostsMessage = document.createElement('p');\n            noPostsMessage.className = 'no-posts-message';\n            noPostsMessage.textContent = 'No posts to show.';\n            postsArea.appendChild(noPostsMessage);\n\n            // Add marker to prevent further requests\n            var _noMorePostsInput = document.createElement('input');\n            _noMorePostsInput.type = 'hidden';\n            _noMorePostsInput.className = 'noMorePosts';\n            _noMorePostsInput.value = 'true';\n            postsArea.appendChild(_noMorePostsInput);\n          }\n        } else {\n          // Handle error response from server\n          console.error('Error loading posts:', data.message || 'Unknown error');\n        }\n      })[\"catch\"](function (error) {\n        // Handle network errors or JSON parsing failures\n        console.error('Error loading posts:', error);\n        loadingIndicator.remove();\n      })[\"finally\"](function () {\n        // Reset progress flag regardless of success or failure\n        // This allows future requests to be made\n        _this2.inProgress = false;\n      });\n    }\n  }, {\n    key: \"LoadhighLights\",\n    value: function LoadhighLights() {\n      var _this3 = this;\n      fetch('includes/handlers/ajax_load_highlight_posts.php', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: \"userLoggedIn=\".concat(userLoggedIn)\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        if (data.status === 'success' && data.data) {\n          var posts = data.data;\n          if (posts.length > 0) {\n            // Render each post in the DOM\n            posts.forEach(function (post) {\n              // Create container element for the post\n              var postElement = document.createElement('div');\n              postElement.className = 'recipe-card card'; // CSS classes for styling\n              postElement.dataset.postid = post.id; // Store post ID as data attribute\n\n              // Build post HTML structure using template literals\n              // This creates the complete card with user image, content, and stats\n              /*html*/\n              postElement.innerHTML = \"\\n              <div class=\\\"card-userImage\\\">\\n                <img src=\\\"\".concat(post.added_by.profile_pic, \"\\\" alt=\\\"\\\">\\n              </div>\\n\\n              \\n              <div class=\\\"card-info\\\">\\n                <div class=\\\"card-desc\\\">\\n                  <div class=\\\"block\\\"></div>\\n                  <div class=\\\"card-headings\\\">\\n                    <h2 class=\\\"heading-2\\\">\\n                      <a href=\\\"\").concat(post.link, \"\\\">\").concat(post.heading, \"</a>\\n                    </h2>\\n                    <h3 class=\\\"heading-3\\\">\\n                      \").concat(post.added_by.first_name, \" \").concat(post.added_by.last_name, \"\\n                    </h3>\\n                    <h4 class=\\\"heading-4\\\">\\n                      \").concat(post.time_message, \"\\n                    </h4>\\n                  </div>\\n                </div>\\n                \\n                <div class=\\\"card-stats\\\">\\n                  <div class=\\\"likes\\\">\\n                    <h4 class=\\\"heading-4\\\">\").concat(post.likes, \"</h4>\\n                    <img src=\\\"./assets/img/like-v2.svg\\\" alt=\\\"\\\">\\n                  </div>\\n                  <div class=\\\"comments\\\">\\n                    <h4 class=\\\"heading-4\\\">\").concat(post.comments_count, \"</h4>\\n                    <img src=\\\"./assets/img/comments-v2.svg\\\" alt=\\\"\\\">\\n                  </div>\\n                </div>\\n              </div>\\n              \\n              <div class=\\\"overlay\\\"></div>\\n              \").concat(post.image ? \"<img src=\\\"\".concat(post.image, \"\\\" class=\\\"card-bg\\\">\") : '', \"\\n            \");\n\n              // Add the completed post element to the posts container\n              _this3.highLights.appendChild(postElement);\n            });\n          }\n        } else if (data.status === 'error') {\n          console.error('Error loading highlights:', data.message);\n        }\n      })[\"catch\"](function (error) {\n        console.error('Error loading highlights:', error);\n      });\n    }\n  }, {\n    key: \"scrollView\",\n    value: function scrollView() {\n      // Check if posts area exists\n      var postsArea = document.querySelector(\".posts_area\");\n      if (!postsArea) return;\n\n      // Check if we've reached the end of posts\n      var noMorePostsElement = postsArea.querySelector(\".noMorePosts\");\n      if (noMorePostsElement && noMorePostsElement.value === \"true\") return;\n\n      // Get all recipe cards\n      var recipecards = document.querySelectorAll(\".recipe-card\");\n      if (recipecards.length === 0) return;\n\n      // Check if we're near the bottom of the page\n      var scrollPosition = window.scrollY;\n      var windowHeight = window.innerHeight;\n      var documentHeight = document.documentElement.scrollHeight;\n\n      // If we're within 200px of the bottom, load more posts\n      if (scrollPosition + windowHeight >= documentHeight - 200) {\n        this.loadPosts();\n      }\n    }\n  }, {\n    key: \"isElementInView\",\n    value: function isElementInView(el) {\n      if (el == null) {\n        return;\n      }\n      var rect = el.getBoundingClientRect();\n      return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n      //* or $(window).height()\n      rect.right <= (window.innerWidth || document.documentElement.clientWidth) //* or $(window).width()\n      ;\n    }\n  }, {\n    key: \"summerNoteInit\",\n    value: function summerNoteInit() {\n      $(\"#summernote\").summernote({\n        height: 400,\n        placeholder: \"write here...\"\n      });\n    }\n  }, {\n    key: \"addPost\",\n    value: function addPost() {\n      var inpFile = document.getElementById(\"inpFile\");\n      var previewContainer = document.getElementById(\"imgPreview\");\n      var previewImage = document.querySelector(\".img-preview-image\");\n      var previewDefaultText = document.querySelector(\".imgPreview-DefaultTxt\");\n      Array.prototype.forEach.call(document.querySelectorAll(\".file-upload-button\"), function (button) {\n        var hiddenInput = button.parentElement.querySelector(\".inpFile\");\n        var label = button.parentElement.querySelector(\".file-upload-label\");\n        var defaultLabelText = \"No file selected\";\n\n        // Set default text for label\n        label.textContent = defaultLabelText;\n        label.title = defaultLabelText;\n        button.addEventListener(\"click\", function () {\n          hiddenInput.click();\n        });\n        hiddenInput.addEventListener(\"change\", function () {\n          var filenameList = Array.prototype.map.call(hiddenInput.files, function (file) {\n            return file.name;\n          });\n          label.textContent = filenameList.join(\", \") || defaultLabelText;\n          label.title = label.textContent;\n        });\n      });\n      var prevPhoto = previewImage.getAttribute(\"src\");\n      if (previewImage.getAttribute(\"src\") == \"\") {\n        previewImage.setAttribute(\"src\", null);\n      } else {\n        previewImage.style.display = \"block\";\n        previewDefaultText.style.display = \"none\";\n      }\n      inpFile.addEventListener(\"change\", function () {\n        var file = this.files[0];\n        if (file) {\n          var reader = new FileReader();\n          previewDefaultText.style.display = \"none\";\n          previewImage.style.display = \"block\";\n          reader.addEventListener(\"load\", function () {\n            previewImage.setAttribute(\"src\", this.result);\n\n            // getCroppedImage(\"src\", this.result);\n          });\n          reader.readAsDataURL(file);\n        } else {\n          previewDefaultText.style.display = \"block\";\n          previewImage.style.display = \"none\";\n          if (previewImage.getAttribute(\"src\") == \"\") {\n            previewImage.setAttribute(\"src\", null);\n          }\n        }\n      });\n    }\n  }]);\n}();\nvar homepage = new Homepage();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./assets/js/pages/HomePage.js\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("34ed9ae97820fe3512ed")
/******/ })();
/******/ 
/******/ }
);
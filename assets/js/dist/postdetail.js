/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/js/modules/Parallax.js":
/*!***************************************!*\
  !*** ./assets/js/modules/Parallax.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"parallax\": () => (/* binding */ parallax)\n/* harmony export */ });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nvar Parallax = /*#__PURE__*/function () {\n  function Parallax() {\n    var _this = this;\n\n    _classCallCheck(this, Parallax);\n\n    this.scroll = document.querySelector(\".scroll\");\n    /**\r\n     * Add an event listener for the window object to detect\r\n     * a scroll event\r\n     *  */\n\n    document.addEventListener(\"scroll\", function (e) {\n      _this.addParallaxScrolling(e);\n    });\n  }\n\n  _createClass(Parallax, [{\n    key: \"addParallaxScrolling\",\n    value: function addParallaxScrolling(e) {\n      var target = document.querySelectorAll(\".scroll\");\n      var index = 0,\n          length = target.length;\n\n      for (index; index < length; index++) {\n        var pos = window.pageYOffset * target[index].dataset.rate;\n\n        if (target[index].dataset.direction === \"vertical\") {\n          target[index].style.transform = \"translate3d(0px,\" + pos + \"px, 0px)\";\n        } else {\n          var posX = window.pageYOffset * target[index].dataset.ratex;\n          var posY = window.pageYOffset * target[index].dataset.ratey;\n          target[index].style.transform = \"translate3d(\" + posX + \"px, \" + posY + \"px, 0px)\";\n        }\n      }\n    }\n  }]);\n\n  return Parallax;\n}();\n\nvar parallax = new Parallax();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hc3NldHMvanMvbW9kdWxlcy9QYXJhbGxheC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0lBQU1BO0FBQ0osc0JBQWM7QUFBQTs7QUFBQTs7QUFDWixTQUFLQyxNQUFMLEdBQWNDLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixTQUF2QixDQUFkO0FBRUE7QUFDSjtBQUNBO0FBQ0E7O0FBQ0lELElBQUFBLFFBQVEsQ0FBQ0UsZ0JBQVQsQ0FBMEIsUUFBMUIsRUFBb0MsVUFBQ0MsQ0FBRCxFQUFPO0FBQ3pDLFdBQUksQ0FBQ0Msb0JBQUwsQ0FBMEJELENBQTFCO0FBRUQsS0FIRDtBQUlEOzs7O1dBR0QsOEJBQXFCQSxDQUFyQixFQUF3QjtBQUN0QixVQUFNRSxNQUFNLEdBQUdMLFFBQVEsQ0FBQ00sZ0JBQVQsQ0FBMEIsU0FBMUIsQ0FBZjtBQUVBLFVBQUlDLEtBQUssR0FBRyxDQUFaO0FBQUEsVUFDRUMsTUFBTSxHQUFHSCxNQUFNLENBQUNHLE1BRGxCOztBQUVBLFdBQUtELEtBQUwsRUFBWUEsS0FBSyxHQUFHQyxNQUFwQixFQUE0QkQsS0FBSyxFQUFqQyxFQUFxQztBQUNuQyxZQUFJRSxHQUFHLEdBQUdDLE1BQU0sQ0FBQ0MsV0FBUCxHQUFxQk4sTUFBTSxDQUFDRSxLQUFELENBQU4sQ0FBY0ssT0FBZCxDQUFzQkMsSUFBckQ7O0FBRUEsWUFBSVIsTUFBTSxDQUFDRSxLQUFELENBQU4sQ0FBY0ssT0FBZCxDQUFzQkUsU0FBdEIsS0FBb0MsVUFBeEMsRUFBb0Q7QUFDbERULFVBQUFBLE1BQU0sQ0FBQ0UsS0FBRCxDQUFOLENBQWNRLEtBQWQsQ0FBb0JDLFNBQXBCLEdBQWdDLHFCQUFxQlAsR0FBckIsR0FBMkIsVUFBM0Q7QUFDRCxTQUZELE1BRU87QUFDTCxjQUFJUSxJQUFJLEdBQUdQLE1BQU0sQ0FBQ0MsV0FBUCxHQUFxQk4sTUFBTSxDQUFDRSxLQUFELENBQU4sQ0FBY0ssT0FBZCxDQUFzQk0sS0FBdEQ7QUFDQSxjQUFJQyxJQUFJLEdBQUdULE1BQU0sQ0FBQ0MsV0FBUCxHQUFxQk4sTUFBTSxDQUFDRSxLQUFELENBQU4sQ0FBY0ssT0FBZCxDQUFzQlEsS0FBdEQ7QUFFQWYsVUFBQUEsTUFBTSxDQUFDRSxLQUFELENBQU4sQ0FBY1EsS0FBZCxDQUFvQkMsU0FBcEIsR0FDRSxpQkFBaUJDLElBQWpCLEdBQXdCLE1BQXhCLEdBQWlDRSxJQUFqQyxHQUF3QyxVQUQxQztBQUVEO0FBQ0Y7QUFDRjs7Ozs7O0FBR0ksSUFBTUUsUUFBUSxHQUFHLElBQUl2QixRQUFKLEVBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVzdC8uL2Fzc2V0cy9qcy9tb2R1bGVzL1BhcmFsbGF4LmpzP2IxNTYiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgUGFyYWxsYXgge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5zY3JvbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNjcm9sbFwiKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZCBhbiBldmVudCBsaXN0ZW5lciBmb3IgdGhlIHdpbmRvdyBvYmplY3QgdG8gZGV0ZWN0XHJcbiAgICAgKiBhIHNjcm9sbCBldmVudFxyXG4gICAgICogICovXHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIChlKSA9PiB7XHJcbiAgICAgIHRoaXMuYWRkUGFyYWxsYXhTY3JvbGxpbmcoZSk7XHJcbiAgICAgIFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgYWRkUGFyYWxsYXhTY3JvbGxpbmcoZSkge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5zY3JvbGxcIik7XHJcblxyXG4gICAgdmFyIGluZGV4ID0gMCxcclxuICAgICAgbGVuZ3RoID0gdGFyZ2V0Lmxlbmd0aDtcclxuICAgIGZvciAoaW5kZXg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgIHZhciBwb3MgPSB3aW5kb3cucGFnZVlPZmZzZXQgKiB0YXJnZXRbaW5kZXhdLmRhdGFzZXQucmF0ZTtcclxuXHJcbiAgICAgIGlmICh0YXJnZXRbaW5kZXhdLmRhdGFzZXQuZGlyZWN0aW9uID09PSBcInZlcnRpY2FsXCIpIHtcclxuICAgICAgICB0YXJnZXRbaW5kZXhdLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlM2QoMHB4LFwiICsgcG9zICsgXCJweCwgMHB4KVwiO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhciBwb3NYID0gd2luZG93LnBhZ2VZT2Zmc2V0ICogdGFyZ2V0W2luZGV4XS5kYXRhc2V0LnJhdGV4O1xyXG4gICAgICAgIHZhciBwb3NZID0gd2luZG93LnBhZ2VZT2Zmc2V0ICogdGFyZ2V0W2luZGV4XS5kYXRhc2V0LnJhdGV5O1xyXG5cclxuICAgICAgICB0YXJnZXRbaW5kZXhdLnN0eWxlLnRyYW5zZm9ybSA9XHJcbiAgICAgICAgICBcInRyYW5zbGF0ZTNkKFwiICsgcG9zWCArIFwicHgsIFwiICsgcG9zWSArIFwicHgsIDBweClcIjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHBhcmFsbGF4ID0gbmV3IFBhcmFsbGF4KCk7XHJcbiJdLCJuYW1lcyI6WyJQYXJhbGxheCIsInNjcm9sbCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwiYWRkUGFyYWxsYXhTY3JvbGxpbmciLCJ0YXJnZXQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW5kZXgiLCJsZW5ndGgiLCJwb3MiLCJ3aW5kb3ciLCJwYWdlWU9mZnNldCIsImRhdGFzZXQiLCJyYXRlIiwiZGlyZWN0aW9uIiwic3R5bGUiLCJ0cmFuc2Zvcm0iLCJwb3NYIiwicmF0ZXgiLCJwb3NZIiwicmF0ZXkiLCJwYXJhbGxheCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./assets/js/modules/Parallax.js\n");

/***/ }),

/***/ "./assets/js/pages/PostDetailPage.js":
/*!*******************************************!*\
  !*** ./assets/js/pages/PostDetailPage.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"postdetail\": () => (/* binding */ postdetail)\n/* harmony export */ });\n/* harmony import */ var _modules_Parallax__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/Parallax */ \"./assets/js/modules/Parallax.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n\n\nvar PostDetail = /*#__PURE__*/function () {\n  function PostDetail() {\n    _classCallCheck(this, PostDetail);\n\n    this.events();\n    this.post_detail = document.querySelector(\".detail\");\n  }\n\n  _createClass(PostDetail, [{\n    key: \"events\",\n    value: function events() {\n      this.getAllLikes();\n      this.sendComment();\n      this.editComment();\n    }\n  }, {\n    key: \"getAllLikes\",\n    value: function getAllLikes() {\n      /**\r\n       *  Gets all the likes for a given post which is then\r\n       * displayed in a pop-up model\r\n       */\n      var likedBy = document.querySelector(\".likedby\");\n      var likeByNumberBtn = document.querySelector(\".likeByNumber\");\n      var moreLikesOverlay = document.querySelector(\".moreLikesOverlay\");\n      var closeLikesModal = document.querySelector(\".closeModal\");\n      var likesModalOverlay = document.querySelector(\".likesModalOverlay\");\n      var moreLikesContent = document.querySelector(\".moreLikesContent\");\n      var likes = document.querySelector(\".likes\");\n      likedBy.addEventListener(\"click\", function (e) {\n        if (e.target.classList.contains(\"likeByNumber\")) {\n          axios({\n            method: \"get\",\n            url: \"includes/handlers/ajax_get_all_likes.php\",\n            params: {\n              post_id: post_id,\n              userLoggedIn: userLoggedIn\n            }\n          }).then(function (res) {\n            return showOutput(res.data);\n          })[\"catch\"](function (err) {\n            return console.error(err);\n          });\n          moreLikesOverlay.classList.add(\"active\"); // body.style.overflow=\"hidden\";\n\n          window.setTimeout(function () {\n            likesModalOverlay.style.opacity = 0.8;\n          }, 300);\n          window.setTimeout(function () {\n            moreLikesContent.style.opacity = 1;\n          }, 1200);\n        }\n      });\n\n      function showOutput(res) {\n        likes.innerHTML = res;\n      }\n\n      if (closeLikesModal) {\n        closeLikesModal.addEventListener(\"click\", function () {\n          moreLikesContent.style.opacity = null;\n          window.setTimeout(function () {\n            likesModalOverlay.style.opacity = null;\n          }, 800);\n          window.setTimeout(function () {\n            moreLikesOverlay.classList.remove(\"active\");\n          }, 1200); // body.style.overflow=null;\n        });\n      }\n\n      if (moreLikesOverlay) {\n        likesModalOverlay.addEventListener(\"click\", function () {\n          moreLikesContent.style.opacity = null;\n          window.setTimeout(function () {\n            likesModalOverlay.style.opacity = null;\n          }, 800);\n          window.setTimeout(function () {\n            moreLikesOverlay.classList.remove(\"active\");\n          }, 1200); // body.style.overflow=null;\n        });\n      }\n    }\n  }, {\n    key: \"updateLike\",\n    value: function updateLike() {\n      var likeHolder = document.querySelector(\".likedForm\");\n      var likedBy = document.querySelector(\".likedby\");\n      var bodyFormData = new FormData();\n      /**\r\n       * For whatever reason the ajax call is preventing this function from\r\n       * being called mulltiple times. For now the best solution is probably just\r\n       * stick with the previuos onClick/Jquery aproach for now\r\n       */\n      // likeHolder.addEventListener(\"click\", function (e) {\n      //   if (e.target.classList.contains(\"btnlike\")) {\n      //     let getNameVaribles = e.target.attributes[\"name\"].value;\n      //     let getNameVariblesArray = getNameVaribles.split(\"-\");\n      //     let post_id = getNameVariblesArray[1];\n      //     let likevalue = getNameVariblesArray[2];\n      //     bodyFormData.append(\"post_id\", post_id);\n      //     bodyFormData.append(\"like_value\", likevalue);\n      //     bodyFormData.append(\"userLoggedIn\", userLoggedIn);\n      //     // axios({\n      //     //   method: \"post\",\n      //     //   url: \"includes/handlers/ajax_update_likes.php\",\n      //     //   headers: {\n      //     //     \"Content-Type\": \"multipart/form-data\",\n      //     //   },\n      //     //   data: bodyFormData,\n      //     // })\n      //     //   .then((res) => {\n      //     //     likedBy.innerHTML = res.data;\n      //     //     // console.log(res.data);\n      //     //   })\n      //     //   .catch((err) => console.error(err));\n      //   }\n      //    if (e.target.classList.contains(\"btnUnlike\")) {\n      //       let getNameVaribles = e.target.attributes[\"name\"].value;\n      //       let getNameVariblesArray = getNameVaribles.split(\"-\");\n      //       let post_id = getNameVariblesArray[1];\n      //       let likevalue = getNameVariblesArray[2];\n      //       bodyFormData.append(\"post_id\", post_id);\n      //       bodyFormData.append(\"like_value\", likevalue);\n      //       bodyFormData.append(\"userLoggedIn\", userLoggedIn);\n      //       // axios({\n      //       //   method: \"post\",\n      //       //   url: \"includes/handlers/ajax_update_likes.php\",\n      //       //   headers: {\n      //       //     \"Content-Type\": \"multipart/form-data\",\n      //       //   },\n      //       //   data: bodyFormData,\n      //       // })\n      //       //   .then((res) => {\n      //       //     likedBy.innerHTML = res.data;\n      //       //     // console.log(res.data);\n      //       //   })\n      //       //   .catch((err) => console.error(err));\n      //     }\n      // });\n    }\n  }, {\n    key: \"sendComment\",\n    value: function sendComment() {\n      var commentBtn = document.getElementById(\"commentBtn\");\n      var commentResponse = document.querySelector(\".commentResponse\");\n      commentBtn.addEventListener(\"click\", function (e) {\n        var id = e.target.name;\n        var commentText = document.getElementById(\"comment\" + e.target.name).value;\n\n        if (commentText === \"\") {\n          alert(\"Please enter some text first\");\n          return;\n        }\n\n        var sendComment = $.post(\"includes/handlers/send_comment.php\", {\n          userLoggedIn: userLoggedIn,\n          commentText: commentText,\n          id: id\n        }, function (response) {\n          if (response !== \"No text\") {\n            var loadComment = $.post(\"includes/handlers/load_comment.php\", {\n              id: id,\n              userLoggedIn: userLoggedIn\n            }, function (newComment) {\n              $(\"#comment\" + id).val(\"\"); // const noComment = $(\"#toggleComment\" + id).find(\n              //   \"#noComment\" + id\n              // );\n\n              if (document.getElementById(\"noComment\" + id)) {\n                var noComment = document.getElementById(\"noComment\" + id);\n\n                if (noComment.length !== 0) {\n                  noComment.remove();\n                }\n              }\n\n              var commentsCountTxt = document.querySelector(\".commentNumber\");\n              var commentsCount = parseInt(commentsCountTxt.textContent, 10);\n              commentsCount++;\n              commentsCount.toString();\n              commentsCountTxt.textContent = commentsCount;\n              commentResponse.innerHTML = \"Comment Successfully Added\";\n              commentResponse.style.display = \"block\";\n              setTimeout(function () {\n                commentResponse.style.opacity = 1;\n                commentResponse.style.visibility = \"visible\";\n              }, 800);\n              setTimeout(function () {\n                commentResponse.style.opacity = 0;\n                commentResponse.style.visibility = \"hidden\";\n              }, 5000);\n              setTimeout(function () {\n                commentResponse.style.display = \"none\";\n              }, 6000);\n              $(\".comments\").append(newComment);\n            });\n          } else {\n            alert(\"Something went wrong. Please try again\");\n          }\n        });\n      });\n    }\n  }, {\n    key: \"editComment\",\n    value: function editComment() {\n      var comments = document.querySelector(\".comments\");\n      var commentbody = document.querySelectorAll(\".commentbody\");\n      var editstatebtns = document.querySelectorAll(\".editstatebtns\");\n      var editCommentbtn = document.querySelectorAll(\".editCommentbtn\");\n      /**\r\n       * Use event delegation to add a click event listner\r\n       * to a comment\r\n       */\n\n      comments.addEventListener(\"click\", function (e) {\n        // console.log('yeah man');\n        // if (!e.target.matches(\".editCommentbtn\")) return;\n        if (e.target.matches(\".editCommentbtn\")) {\n          /**\r\n           * Use the data attribute that is set on each comment entry\r\n           * to get some of the data that is neccessary to edit the\r\n           * comment such as the comment ID, and the user that the\r\n           * comment is being posted to, which in the case is the author\r\n           * of this post.\r\n           */\n          var commentData = e.target.parentElement.parentElement.getAttribute(\"data-req\").split(\",\");\n          var commentId = commentData[0];\n          var commentToUser = commentData[1];\n          /**\r\n           * We need to get the correct comment to apply the\r\n           * edit state styling on. We do that by first getting the parentElement\r\n           * then getting the previous sibling\r\n           */\n\n          var selectedCommentBody = e.target.parentElement.previousElementSibling;\n          /**\r\n           * Get the buttons to apply the necessary styling on\r\n           */\n\n          var currentBtn = e.target;\n          var deleteCommentbtn = e.target.nextElementSibling;\n          var saveCommentbtn = e.target.nextElementSibling.nextElementSibling;\n          var cancelCommentbtn = e.target.nextElementSibling.nextElementSibling.nextElementSibling;\n          selectedCommentBody.classList.add(\"editState\");\n          selectedCommentBody.contentEditable = true;\n          currentBtn.style.display = \"none\";\n          deleteCommentbtn.style.display = \"none\";\n          saveCommentbtn.style.display = \"block\";\n          cancelCommentbtn.style.display = \"block\";\n          setTimeout(function () {\n            saveCommentbtn.style.opacity = 1;\n            cancelCommentbtn.style.opacity = 1;\n            saveCommentbtn.style.visibility = \"visible\";\n            cancelCommentbtn.style.visibility = \"visible\";\n          }, 600);\n        } else if (e.target.matches(\".saveCommentbtn\")) {\n          var showresponse = function showresponse(res) {\n            responseText.innerHTML = res;\n            responseText.style.display = \"block\";\n            setTimeout(function () {\n              responseText.style.opacity = 1;\n              responseText.style.visibility = \"visible\";\n            }, 800);\n            setTimeout(function () {\n              responseText.style.opacity = 0;\n              responseText.style.visibility = \"hidden\";\n            }, 5000);\n            setTimeout(function () {\n              responseText.style.display = \"none\";\n            }, 6000);\n          };\n\n          var bodyFormData = new FormData();\n          /**\r\n           * Use the data attribute that is set on each comment entry\r\n           * to get some of the data that is neccessary to edit the\r\n           * comment such as the comment ID, and the user that the\r\n           * comment is being posted to, which in the case is the author\r\n           * of this post.\r\n           */\n\n          var _commentData = e.target.parentElement.parentElement.getAttribute(\"data-req\").split(\",\");\n          /**\r\n           * We need to get the correct comment to apply the\r\n           * edit state styling on. We do that by first getting the parentElement\r\n           * then getting the previous sibling\r\n           */\n\n\n          var _selectedCommentBody = e.target.parentElement.previousElementSibling;\n          var responseText = e.target.parentElement.previousElementSibling.previousElementSibling.lastElementChild;\n          var _commentId = _commentData[0];\n          var _commentToUser = _commentData[1];\n          var commentBody = _selectedCommentBody.innerHTML;\n          bodyFormData.append(\"comment_id\", _commentId);\n          bodyFormData.append(\"commentToUser\", _commentToUser);\n          bodyFormData.append(\"comment_Body\", commentBody);\n          bodyFormData.append(\"userLoggedIn\", userLoggedIn);\n          bodyFormData.append(\"post_id\", post_id);\n          bodyFormData.append(\"edit_comment\", \"edit_comment\");\n          axios({\n            method: \"post\",\n            url: \"includes/form_handlers/edit_comment_handler.php\",\n            headers: {\n              \"Content-Type\": \"multipart/form-data\"\n            },\n            data: bodyFormData\n          }).then(function (res) {\n            return showresponse(res.data);\n          })[\"catch\"](function (err) {\n            return console.error(err);\n          });\n          /**\r\n           * Get the buttons to apply the necessary styling on\r\n           */\n\n          var _currentBtn = e.target;\n          var _editCommentbtn = e.target.previousElementSibling.previousElementSibling;\n          var _deleteCommentbtn = e.target.previousElementSibling;\n          var _cancelCommentbtn = e.target.nextElementSibling;\n          _currentBtn.style.opacity = 0;\n          _cancelCommentbtn.style.opacity = 0;\n          _currentBtn.style.visibility = \"hidden\";\n          _cancelCommentbtn.style.visibility = \"hidden\";\n          setTimeout(function () {\n            _selectedCommentBody.classList.remove(\"editState\");\n\n            _currentBtn.style.display = \"none\";\n            _cancelCommentbtn.style.display = \"none\";\n            _editCommentbtn.style.display = \"block\";\n            _deleteCommentbtn.style.display = \"block\";\n          }, 600);\n        } else if (e.target.matches(\".cancelCommentbtn\")) {\n          /**\r\n           * We need to get the correct comment to apply the\r\n           * edit state styling on. We do that by first getting the parentElement\r\n           * then getting the previous sibling\r\n           */\n          var _selectedCommentBody2 = e.target.parentElement.previousElementSibling;\n          var _currentBtn2 = e.target;\n          var _editCommentbtn2 = e.target.previousElementSibling.previousElementSibling.previousElementSibling;\n          var _deleteCommentbtn2 = e.target.previousElementSibling.previousElementSibling;\n          var _saveCommentbtn = e.target.previousElementSibling;\n          _currentBtn2.style.opacity = 0;\n          _saveCommentbtn.style.opacity = 0;\n          _currentBtn2.style.visibility = \"hidden\";\n          _saveCommentbtn.style.visibility = \"hidden\";\n          setTimeout(function () {\n            _selectedCommentBody2.classList.remove(\"editState\");\n\n            _currentBtn2.style.display = \"none\";\n            _saveCommentbtn.style.display = \"none\";\n            _editCommentbtn2.style.display = \"block\";\n            _deleteCommentbtn2.style.display = \"block\";\n          }, 600);\n        } else if (e.target.matches(\".deleteCommentbtn\")) {\n          var _bodyFormData = new FormData();\n          /**\r\n           * Use the data attribute that is set on each comment entry\r\n           * to get some of the data that is neccessary to edit the\r\n           * comment such as the comment ID, and the user that the\r\n           * comment is being posted to, which in the case is the author\r\n           * of this post.\r\n           */\n\n\n          var _commentData2 = e.target.parentElement.parentElement.getAttribute(\"data-req\").split(\",\");\n\n          var _commentId2 = _commentData2[0];\n\n          _bodyFormData.append(\"comment_id\", _commentId2);\n\n          _bodyFormData.append(\"userLoggedIn\", userLoggedIn);\n\n          _bodyFormData.append(\"post_id\", post_id);\n\n          _bodyFormData.append(\"delete_comment\", \"delete_comment\"); // let commentEntries = document.querySelectorAll(\".commentEntry\");\n          // let commentsParent = document.querySelector(\".comments\")\n\n\n          var currentCommentEntry = e.target.parentElement.parentElement;\n          axios({\n            method: \"post\",\n            url: \"includes/form_handlers/delete_comment.php\",\n            headers: {\n              \"Content-Type\": \"multipart/form-data\"\n            },\n            data: _bodyFormData\n          }).then(function (res) {\n            var commentsCountTxt = document.querySelector(\".commentNumber\");\n            var commentsCount = parseInt(commentsCountTxt.textContent, 10);\n            commentsCount--;\n            commentsCount.toString();\n            commentsCountTxt.textContent = commentsCount;\n            currentCommentEntry.style.opacity = 0;\n            setTimeout(function () {\n              currentCommentEntry.remove();\n            }, 700);\n          })[\"catch\"](function (err) {\n            return console.error(err);\n          });\n        } else {\n          return false;\n        }\n      });\n    }\n  }]);\n\n  return PostDetail;\n}();\n\nvar postdetail = new PostDetail();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./assets/js/pages/PostDetailPage.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./assets/js/pages/PostDetailPage.js");
/******/ 	
/******/ })()
;
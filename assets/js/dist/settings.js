/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/js/pages/SettingsPage.js":
/*!*****************************************!*\
  !*** ./assets/js/pages/SettingsPage.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   settingspage: () => (/* binding */ settingspage)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _readOnlyError(r) { throw new TypeError('\"' + r + '\" is read-only'); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar SettingPage = /*#__PURE__*/function () {\n  function SettingPage() {\n    _classCallCheck(this, SettingPage);\n    this.events();\n    this.settingsContain = document.querySelector(\".settingsContain\");\n  }\n  return _createClass(SettingPage, [{\n    key: \"events\",\n    value: function events() {\n      var _this = this;\n      setTimeout(function () {\n        if (_this.settingsContain) {\n          _this.addAvatarImg();\n          _this.addProfileHeaderImg();\n          _this.saveDetails();\n          _this.changePassword();\n        }\n      }, 0);\n    }\n  }, {\n    key: \"addAvatarImg\",\n    value: function addAvatarImg() {\n      var file;\n      var avatarBtn = document.getElementById(\"myAvatarFile\");\n      var avatarPreview = document.querySelector(\".avatarPreview\");\n      var avatarImage = document.getElementById(\"avatarImage\");\n      var cropperJsModal = document.querySelector(\".cropperJsModal\");\n      var avatarCrop = document.getElementById(\"avatarCrop\");\n      var avatarCancelcrop = document.getElementById(\"avatarCancelcrop\");\n      var cropperJsModalClose = document.querySelector(\".cropperJsModal .modalContent .closeBtn\");\n      var croppedAvatarImage = document.getElementById(\"croppedAvatarImage\");\n      var croppedAvatarPreview = document.querySelector(\".cropperJsModal .preview\");\n      var uploadRes = document.querySelector(\".uploadRes\");\n      avatarBtn.addEventListener(\"change\", function () {\n        file = this.files[0];\n        if (file) {\n          var reader = new FileReader();\n          avatarPreview.style.display = \"block\";\n          reader.addEventListener(\"load\", function () {\n            avatarPreview.setAttribute(\"src\", this.result);\n            getCroppedImage(\"src\", this.result);\n          });\n          reader.readAsDataURL(file);\n        } else {\n          avatarPreview.style.display = \"none\";\n          avatarPreview.setAttribute(\"src\", null);\n        }\n      });\n      function getCroppedImage(src, result) {\n        var cropper;\n        var canvas;\n        croppedAvatarImage.setAttribute(src, result);\n        cropperJsModal.classList.add(\"active\");\n        cropper = new Cropper(croppedAvatarImage, {\n          // aspectRatio: 1,\n          viewMode: 3,\n          preview: croppedAvatarPreview\n        });\n        avatarCrop.addEventListener(\"click\", function () {\n          canvas = cropper.getCroppedCanvas({\n            width: 512,\n            height: 512\n          });\n          canvas.toBlob(function (blob) {\n            src = URL.createObjectURL(blob);\n            var reader = new FileReader();\n            reader.readAsDataURL(blob);\n            reader.onloadend = function () {\n              var base64data = reader.result;\n              var bodyFormData = new FormData();\n              bodyFormData.append(\"changeAvatar\", \"changeAvatar\");\n              bodyFormData.append(\"profile_id\", userLoggedIn);\n              bodyFormData.append(\"image\", blob, base64data);\n              axios({\n                method: \"post\",\n                url: \"includes/form_handlers/settings_handler.php\",\n                headers: {\n                  \"Content-Type\": \"multipart/form-data\"\n                },\n                data: bodyFormData\n              }).then(function (res) {\n                cropper.destroy();\n                cropper = null;\n                canvas = null;\n                avatarPreview.setAttribute(\"src\", base64data);\n                console.log(res.data);\n                showMsg(res.data);\n                cropperJsModal.classList.remove(\"active\");\n                navbarAvatarImg.setAttribute(\"src\", base64data);\n                prevPhoto = base64data;\n              })[\"catch\"](function (err) {\n                return console.error(err);\n              });\n            };\n          });\n        });\n        function showMsg(res) {\n          uploadRes.innerHTML = res;\n          uploadRes.style.display = \"block\";\n          setTimeout(function () {\n            uploadRes.style.opacity = 1;\n            uploadRes.style.visibility = \"visible\";\n          }, 600);\n          setTimeout(function () {\n            uploadRes.style.opacity = 0;\n            uploadRes.style.visibility = \"hidden\";\n          }, 5000);\n          setTimeout(function () {\n            uploadRes.style.display = \"none\";\n          }, 6000);\n        }\n        avatarCancelcrop.addEventListener(\"click\", function () {\n          cropperJsModal.classList.remove(\"active\");\n          cropper.destroy();\n          cropper = null;\n          avatarPreview.setAttribute(\"src\", prevPhoto);\n        });\n      }\n      Array.prototype.forEach.call(document.querySelectorAll(\".avatar\"), function (button) {\n        var hiddenInput = document.querySelector(\".fileUploadInputAvatar\");\n        var label = document.querySelector(\".fileUploadAvatarLabel\");\n        var defaultLabelText = \"No file selected\";\n        if (label) {\n          // Set default text for label\n          label.textContent = defaultLabelText;\n          label.title = defaultLabelText;\n        }\n        button.addEventListener(\"click\", function () {\n          hiddenInput.click();\n        });\n        if (hiddenInput) {\n          hiddenInput.addEventListener(\"change\", function () {\n            var filenameList = Array.prototype.map.call(hiddenInput.files, function (file) {\n              return file.name;\n            });\n            label.textContent = filenameList.join(\", \") || defaultLabelText;\n            label.title = label.textContent;\n          });\n        }\n      });\n    }\n  }, {\n    key: \"addProfileHeaderImg\",\n    value: function addProfileHeaderImg() {\n      var file;\n      var inpFile = document.getElementById(\"inpFile\");\n      var previewContainer = document.getElementById(\"imgPreview\");\n      var previewImage = document.querySelector(\".img-preview-image\");\n      var previewDefaultText = document.querySelector(\".imgPreview-DefaultTxt\");\n      var croppedProfileImage = document.getElementById(\"croppedProfileImage\");\n      var cropperJsProfileHeaderModal = document.querySelector(\".cropperJsProfileHeaderModal\");\n      var croppedProfileHeaderPreview = document.querySelector(\".cropperJsProfileHeaderModal .preview\");\n      var profileHeaderCrop = document.getElementById(\"profileHeaderCrop\");\n      var profileHeaderCancelcrop = document.getElementById(\"profileHeaderCancelcrop\");\n      var uploadRes = document.querySelector(\".uploadRes\");\n      var prevPhoto = previewImage.getAttribute(\"src\");\n      if (previewImage.getAttribute(\"src\") == \"\") {\n        previewImage.setAttribute(\"src\", null);\n      } else {\n        previewImage.style.display = \"block\";\n        previewDefaultText.style.display = \"none\";\n      }\n      inpFile.addEventListener(\"change\", function () {\n        var file = this.files[0];\n        if (file) {\n          var reader = new FileReader();\n          previewDefaultText.style.display = \"none\";\n          previewImage.style.display = \"block\";\n          reader.addEventListener(\"load\", function () {\n            previewImage.setAttribute(\"src\", this.result);\n            getCroppedImage(\"src\", this.result);\n          });\n          reader.readAsDataURL(file);\n        } else {\n          previewDefaultText.style.display = \"block\";\n          previewImage.style.display = \"none\";\n          if (previewImage.getAttribute(\"src\") == \"\") {\n            previewImage.setAttribute(\"src\", null);\n          }\n        }\n      });\n      function getCroppedImage(src, result) {\n        var cropper;\n        var canvas;\n        croppedProfileImage.setAttribute(src, result);\n        cropperJsProfileHeaderModal.classList.add(\"active\");\n        cropper = new Cropper(croppedProfileImage, {\n          // aspectRatio: 1,\n          viewMode: 3,\n          preview: croppedProfileHeaderPreview\n        });\n        profileHeaderCrop.addEventListener(\"click\", function (e) {\n          e.preventDefault();\n          canvas = cropper.getCroppedCanvas({\n            width: 2000,\n            height: 700\n          });\n          canvas.toBlob(function (blob) {\n            src = URL.createObjectURL(blob);\n            var reader = new FileReader();\n            reader.readAsDataURL(blob);\n            reader.onloadend = function () {\n              var base64data = reader.result;\n              var bodyFormData = new FormData();\n              bodyFormData.append(\"changeProfileHeader\", \"changeProfileHeader\");\n              bodyFormData.append(\"profile_id\", userLoggedIn);\n              bodyFormData.append(\"inpFile\", blob, base64data);\n              axios({\n                method: \"post\",\n                url: \"includes/form_handlers/settings_handler.php\",\n                headers: {\n                  \"Content-Type\": \"multipart/form-data\"\n                },\n                data: bodyFormData\n              }).then(function (res) {\n                cropper.destroy();\n                cropper = null;\n                canvas = null;\n                previewImage.setAttribute(\"src\", base64data);\n                console.log(res.data);\n                showMsg(res.data);\n                cropperJsProfileHeaderModal.classList.remove(\"active\");\n                prevPhoto = base64data;\n              })[\"catch\"](function (err) {\n                return console.error(err);\n              });\n            };\n          });\n        });\n        function showMsg(res) {\n          uploadRes.innerHTML = res;\n          uploadRes.style.display = \"block\";\n          setTimeout(function () {\n            uploadRes.style.opacity = 1;\n            uploadRes.style.visibility = \"visible\";\n          }, 600);\n          setTimeout(function () {\n            uploadRes.style.opacity = 0;\n            uploadRes.style.visibility = \"hidden\";\n          }, 5000);\n          setTimeout(function () {\n            uploadRes.style.display = \"none\";\n          }, 6000);\n        }\n        profileHeaderCancelcrop.addEventListener(\"click\", function () {\n          cropperJsProfileHeaderModal.classList.remove(\"active\");\n          cropper.destroy();\n          cropper = null;\n          previewImage.setAttribute(\"src\", prevPhoto);\n        });\n      }\n      Array.prototype.forEach.call(document.querySelectorAll(\".file-upload-button\"), function (button) {\n        var hiddenInput = button.parentElement.querySelector(\".inpFile\");\n        var label = button.parentElement.querySelector(\".file-upload-label\");\n        var defaultLabelText = \"No file selected\";\n\n        // Set default text for label\n        label.textContent = defaultLabelText;\n        label.title = defaultLabelText;\n        button.addEventListener(\"click\", function () {\n          hiddenInput.click();\n        });\n        hiddenInput.addEventListener(\"change\", function () {\n          var filenameList = Array.prototype.map.call(hiddenInput.files, function (file) {\n            return file.name;\n          });\n          label.textContent = filenameList.join(\", \") || defaultLabelText;\n          label.title = label.textContent;\n        });\n      });\n    }\n  }, {\n    key: \"saveDetails\",\n    value: function saveDetails() {\n      var saveDetails = document.getElementById(\"save_details\");\n      var responseDiv = document.querySelector(\".response\");\n      var uploadAvatarBtn = document.querySelector(\".uploadAvatarBtn\");\n      var uploadRes = document.querySelector(\".uploadRes\");\n      var save_Password = document.getElementById(\"savePassword\");\n      saveDetails.addEventListener(\"click\", function (e) {\n        e.preventDefault();\n        var bodyFormData = new FormData();\n        bodyFormData.append(\"first_name\", document.getElementById(\"settings_input_firstname\").value);\n        bodyFormData.append(\"last_name\", document.getElementById(\"settings_input_lastname\").value);\n        bodyFormData.append(\"email\", document.getElementById(\"settings_input_email\").value);\n        bodyFormData.append(\"city\", document.getElementById(\"settings_input_city\").value);\n        bodyFormData.append(\"state\", document.getElementById(\"settings_input_state\").value);\n        bodyFormData.append(\"fav_food\", document.getElementById(\"settings_input_food\").value);\n        bodyFormData.append(\"userLoggedIn\", userLoggedIn);\n        bodyFormData.append(\"update_details\", \"update_details\");\n        function showresponse(res) {\n          responseDiv.innerHTML = res;\n          responseDiv.style.display = \"block\";\n          setTimeout(function () {\n            responseDiv.style.opacity = 1;\n            responseDiv.style.visibility = \"visible\";\n          }, 600);\n          setTimeout(function () {\n            responseDiv.style.opacity = 0;\n            responseDiv.style.visibility = \"hidden\";\n          }, 5000);\n          setTimeout(function () {\n            responseDiv.style.display = \"none\";\n          }, 6000);\n        }\n        axios({\n          method: \"post\",\n          url: \"includes/form_handlers/settings_handler.php\",\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          },\n          data: bodyFormData\n        }).then(function (res) {\n          return showresponse(res.data);\n        })[\"catch\"](function (err) {\n          return console.error(err);\n        });\n      });\n    }\n  }, {\n    key: \"changePassword\",\n    value: function changePassword() {\n      var changePassword = document.getElementById(\"changePassword\");\n      var save_Password = document.getElementById(\"savePassword\");\n      var responseDiv = document.querySelector(\".response\");\n      savePassword.addEventListener(\"click\", function (e) {\n        e.preventDefault();\n        var bodyFormData = new FormData();\n        bodyFormData.append(\"old_password\", document.getElementById(\"settings_input_old_password\").value);\n        bodyFormData.append(\"new_password_1\", document.getElementById(\"settings_input_new_password\").value);\n        bodyFormData.append(\"new_password_2\", document.getElementById(\"settings_input_new_password_again\").value);\n        bodyFormData.append(\"userLoggedIn\", userLoggedIn);\n        bodyFormData.append(\"update_password\", \"update_password\");\n        axios({\n          method: \"post\",\n          url: \"includes/form_handlers/settings_handler.php\",\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          },\n          data: bodyFormData\n        }).then(function (res) {\n          return showresponse(res.data);\n        })[\"catch\"](function (err) {\n          return console.error(err);\n        });\n        function showresponse(res) {\n          responseDiv.innerHTML = res;\n          responseDiv.style.display = \"block\";\n          setTimeout(function () {\n            responseDiv.style.opacity = 1;\n            responseDiv.style.visibility = \"visible\";\n          }, 600);\n          setTimeout(function () {\n            responseDiv.style.opacity = 0;\n            responseDiv.style.visibility = \"hidden\";\n          }, 5000);\n          setTimeout(function () {\n            responseDiv.style.display = \"none\";\n          }, 6000);\n        }\n      });\n    }\n  }]);\n}();\nvar settingspage = new SettingPage();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./assets/js/pages/SettingsPage.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./assets/js/pages/SettingsPage.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;